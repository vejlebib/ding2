<?php

/**
 * @file
 *
 * Install file for the vejlebib settings module.
 */

/**
 * Implements hook_install().
 *
 * Updates the database with settings specific to Vejle's instance of the
 * DDB CMS.
 */
function vejlebib_settings_install() {
  // Install our shortcut set.
  _vejlebib_settings_install_default_shortcut_set();
}

/**
 * Implements hook_uninstall().
 */
function vejlebib_settings_uninstall() {
  variable_del('vejlebib_default_shortcut_set');
}

/**
 * Setup and remember the default shortcut set for vejlebib. By separating our
 * shortcuts in our set we have bette control over what's added and removed.
 */
function _vejlebib_settings_install_default_shortcut_set() {
  // Indempotent functions are nice!
  if ($set_name = variable_get('vejlebib_default_shortcut_set', FALSE)) {
    $shortcut_set = shortcut_set_load($set_name);
    if (!shortcut_set_delete($shortcut_set)) {
      return;
    }
  }

  $shortcut_set = new stdClass();
  $shortcut_set->title = 'Vejlebib shortcut set';

  $shortcut_set->links = array(
    array(
      'link_path' => 'node/add/ding-news',
      'link_title' => 'Opret nyhed',
      'weight' => -17,
    ),
    array(
      'link_path' => 'node/add/ding-event',
      'link_title' => 'Opret begivenhed',
      'weight' => -16,
    ),
    array(
      'link_path' => 'node/add/ding-page',
      'link_title' => 'Opret side',
      'weight' => -15,
    ),
    array(
      'link_path' => 'admin/content',
      'link_title' => 'Find indhold',
      'weight' => -14,
    ),
    array(
      'link_path' => 'node/add/ding-rolltab',
      'link_title' => 'Rullefane',
      'weight' => -13,
    ),
    array(
      'link_path' => 'admin/structure/nodequeue',
      'link_title' => 'Nodekø',
      'weight' => -12,
    ),
    array(
      'link_path' => 'admin/config/content/scheduler/list',
      'link_title' => 'Scheduler',
      'weight' => -11,
    ),
    array(
      'link_path' => 'admin/config/ting/ting_search_carousel',
      'link_title' => 'Karrusel',
      'weight' => -10,
    ),
    array(
      'link_path' => 'admin/config/regional/translate/translate',
      'link_title' => 'Oversæt',
      'weight' => -9,
    ),
    array(
      'link_path' => 'admin/config/ting/ting-field-search/profiles',
      'link_title' => 'Søgeprofiler',
      'weight' => -8
    ),
  );

  if (SAVED_NEW == shortcut_set_save($shortcut_set) && !empty($shortcut_set->set_name)) {
    // So we can remember what to use in hook_shortcut_default_set.
    variable_set('vejlebib_default_shortcut_set', $shortcut_set->set_name);
  }
}

/**
 * Add the provider role to all provider users.
 */
function vejlebib_settings_update_7001(&$sandbox) {
	set_time_limit(0);
  // Load user uid's.
  $query = db_select('users', 'u')
  	->fields('u', array('uid'));
  $or_condition = db_or();
  $or_condition->condition('init', '%@ding_user', 'LIKE');
  $or_condition->condition('init', '%@alma_user', 'LIKE');
  $uids = $query->condition($or_condition)->execute();

  // Find provider role id.
  $roles = user_roles(TRUE);
  $rid = array_search('provider', $roles);

  // Loop over the accounts and set new roles.
  foreach ($uids as $uid) {
    $account = user_load($uid->uid);
    if (ding_user_is_provider_user($account)) {
      $edit['roles'] = array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $rid => 'provider',
      );
      user_save($account, $edit);
    }
  }
}

/**
 * Setup the secondary menu
 * Setup menu position rule with 'inspiration' path.
 * Reverts new menu position rule with pages condition
 * Removed old temaer/[nid]/* aliases and create new with inspiration path.
 */
function vejlebib_settings_update_7002(&$sandbox) {
  // Secondary menu
	foreach (menu_load_links('menu-secondary-menu') as $menu_link) {
		menu_link_delete($menu_link['mlid']);
	}
	$link = array(
    'menu_name' => 'menu-secondary-menu',
    'weight' => 50,
    'link_title' => 'Kontakt',
    'link_path' => 'contact',
    'language' => LANGUAGE_NONE,
  );
  menu_link_save($link);
	$link = array(
    'menu_name' => 'menu-secondary-menu',
    'link_title' => 'Facebook',
    'link_path' => 'https://www.facebook.com/vejlebibliotekerne',
    'language' => LANGUAGE_NONE,
  );
  menu_link_save($link);

  // Menu position rule
  ding_groups_install_menu_position();

  // Revert new menu position rule with pages condition
  ding_groups_install_menu_position('revert');

  // We require some of our feature components to be reverted with some of our
  // new changes in this update, so we revert here to be safe.
  features_revert(array('ding_groups' => array('page_manager_pages', 'variable')));
  $nodes = node_load_multiple(array(), array('type' => 'ding_group'));
  foreach ($nodes as $node) {
    // First, update the default menu-links for each ding_group OG Menu.
    _og_menu_default_links_set_default_links('menu-og-' . $node->nid, 'update');

    // Then we go ahead and update aliases for each group and every sub-page in
    // that group.
    module_load_include('inc', 'pathauto');
    // We could have used pathauto_pattern_load_by_entity(), but this is safer
    // if the feature that sets up the new pattern hasn't been rebuild.
    $pattern = 'inspiration/[node:title]';
    $group_alias = token_replace($pattern, array('node' => $node), array(
      'sanitize' => FALSE,
      'clear' => TRUE,
      'callback' => 'pathauto_clean_token_values',
      'language' => (object) array('language' => LANGUAGE_NONE),
      'pathauto' => TRUE,
    ));
    $group_source = 'node/' . $node->nid;
    $existing_group_alias = _pathauto_existing_alias_data($group_source, LANGUAGE_NONE);
    $path = array(
      'source' => $group_source,
      'alias' => $group_alias,
      'language' => LANGUAGE_NONE,
    );
    // By passing the existing group alias it will be removed by pathauto, which
    // provides a handy wrapper around core path_save() for that purpose.
    _pathauto_set_alias($path, $existing_group_alias);

    foreach (array('nyheder', 'arrangementer') as $slug) {
      if (!path_load(array('alias' => $alias . '/' . $slug))) {
        $existing_alias = _pathauto_existing_alias_data('temaer/' . $node->nid . '/' . $slug, LANGUAGE_NONE);
        $path = array(
          'source' => 'inspiration/' . $node->nid . '/' . $slug,
          'alias' => $group_alias . '/' . $slug,
          'language' => LANGUAGE_NONE,
        );

        // Set the alias or update it.
        _pathauto_set_alias($path, $existing_alias);
      }

      // Create alias for news and event terms.
      if ($slug == 'nyheder') {
        $vocabulary = taxonomy_vocabulary_machine_name_load ('news_category');
      }
      else {
        $vocabulary = taxonomy_vocabulary_machine_name_load('event_category');
      }
      $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));

      foreach ($terms as $term) {
        $existing_alias = _pathauto_existing_alias_data('temaer/' . $node->nid . '/' . $slug . '/' . $term->tid, LANGUAGE_NONE);
        $alias = $group_alias . '/' . $slug . '/' . $term->name;
        $alias = pathauto_cleanstring($alias);
        $alias = pathauto_clean_alias($alias);
        pathauto_alias_uniquify($alias, $source, LANGUAGE_NONE);

        if ($alias != $existing_alias['alias']) {
          $path = array(
            'source' => 'inspiration/' . $node->nid . '/' . $slug . '/' . $term->tid,
            'alias' => $alias,
            'language' => LANGUAGE_NONE,
          );

          // Set the alias or update it.
          _pathauto_set_alias($path, $existing_alias);
        }
      }
    }
  }
}

/**
 * Enable the Profile2 i18n integration module.
 * Enable Ting search context.
 * Enable Ting field search.
 */
function vejlebib_settings_update_7003(&$sandbox) {
  module_enable(array(
    'profile2_i18n',
    'ting_search_context',
    'ting_field_search',
  ));
}

/**
 * Disable Profile2 i18n module.
 * Delete the old 'administrator' role.
 */
function vejlebib_settings_update_7004(&$sandbox) {
  module_disable('profile2_i18n');

  if (user_role_load_by_name('administrator')) {
    user_role_delete('administrator');
  }
}

/**
 * Enable admin_menu modules for vejlebib branch.
 */
function vejlebib_settings_update_7005() {
  module_enable(array('admin_menu', 'admin_menu_toolbar'));

  ding2_admin_menu_shortcuts();
}

/**
 * Enable htmlmail, mmeu, gtranslate for vejlebib branch.
 */
function vejlebib_settings_update_7006() {
  module_enable(array('htmlmail', 'mmeu', 'gtranslate'));
}

/**
 * Enable vejlebib_fbs
 */
function vejlebib_settings_update_7007() {
  module_enable(array('vejlebib_fbs'));
}

/**
 * Disable dynamic_background
 * Install our own shortcut set.
 */
function vejlebib_settings_update_7008() {
  module_disable(array('dynamic_background'));
  drupal_uninstall_modules(array('dynamic_background'));
  _vejlebib_settings_install_default_shortcut_set();
}

/**
 * Disable content view that overrides admin_views_node and enable this instead.
 *
 * Note: This update function is copied moved from bpi module and placed here,
 * since it's unclear whether the related changes make it to core. If they do,
 * there's no harm in running it twice.
 */
function vejlebib_settings_update_7009() {
  $views_defaults = variable_get('views_defaults', array());
  if (!empty($views_defaults['admin_views_node'])) {
    $views_defaults['admin_views_node'] = FALSE;
  }
  if (empty($views_defaults['content'])) {
    $views_defaults['content'] = TRUE;
  }
  variable_set('views_defaults', $views_defaults);
}

/**
 * Ensure ding_bookmark is uninstalled.
 */
function vejlebib_settings_update_7010() {
  // This is done several places, but do it here also as a precaution.
  module_disable(array('ding_bookmark'));
  // The uninstall is not done elsewhere however:
  drupal_uninstall_modules(array('ding_bookmark'));
}

/**
 * Disable and uninstall ding_opening_hours and ting_covers_plus modules.
 */
function vejlebib_settings_update_7011() {
  module_disable(array('ding_opening_hours', 'ting_covers_plus'));
  drupal_uninstall_modules(array('ding_opening_hours', 'ting_covers_plus'));
}

/**
 * Remove old wellejus theme settings.
 */
function vejlebib_settings_update_7012() {
  variable_del('theme_wellejust_settings');
}

/**
 * Disable and uninstall chr.
 */
 function vejlebib_settings_update_7013() {
  module_disable(array('chr'));
  drupal_uninstall_modules(array('chr'));
 }

/**
 * Properly disable and uninstall some old leftover modules.
 * For more information see: https://www.drupal.org/node/2487215
 */
function vejlebib_settings_update_7014() {
  module_disable(array('openlayers', 'taxonomy_menu'), TRUE);
  drupal_uninstall_modules(array('openlayers', 'taxonomy_menu'), TRUE);

  ding2_remove_module('ting_extrasearch');
  ding2_remove_module('smartqueue_nodetypes');
}

/**
 * Disable and uninstall Ding IPE filter.
 */
function vejlebib_settings_update_7015() {
  module_disable(array('ding_ipe_filter'));
  drupal_uninstall_modules(array('ding_ipe_filter'));
}

/**
 * Disable ting_visual_relation and ting_oembed_features.
 */
function vejlebib_settings_update_7016() {
  // The field group features contained in these modules where causing issues
  // with the new layout of ting objects. Needs to be fixed before cam enable
  // again.
  // Currently only ding_ekurser makes use of ting_oembed?
  module_disable(array('ting_visual_relation', 'ting_oembed_features'));
}


/**
 * Disable old (panelized) inspiration page if it's present.
 */
function vejlebib_settings_update_7017() {
  $node  = node_load(5664);
  // A specific node id and title should be safe enough.
  if ($node && strtolower(trim($node->title)) == 'inspiration') {
    // We still like to keep it so we just unpublish and remove URL-alias.
    $node->status = 0;
    node_save($node);
    path_delete(array('source' => 'node/' . $node->nid));
  }
}

/**
 * Disable and uninstall Panelizer.
 */
function vejlebib_settings_update_7018() {
  // We currently have no use for this and it's causing annoying warnings,
  // because Panels < 3.6. And upgrade of Panels is not an option right now.
  module_disable(array('panelizer'));
  drupal_uninstall_modules(array('panelizer'));
}

/**
 * Install new theme and disable old.
 */
function vejlebib_settings_update_7019() {
  theme_enable(array('vejlebib'));
  variable_set('theme_default', 'vejlebib');
  theme_disable(array('wellejus'));
}

/**
 * Disable toolbar in vejlebib.
 */
function vejlebib_settings_update_7044() {
  module_disable(array('toolbar'));
}

/**
 * Delete left over ting_infomedia field.
 */
function vejlebib_settings_update_7045() {
  field_delete_field('ting_infomedia');
  field_purge_batch(10);
}

/**
 * Unpublish all ding_news nodes older than 01-01-2018 00:00.
 */
function vejlebib_settings_update_7046(&$sandbox) {
  $time_cutoff = strtotime('Monday 1. January 2018 UTC');

  $query = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->orderBy('n.nid', 'ASC')
    ->condition('n.created', $time_cutoff, '<')
    ->condition('n.status', 1)
    ->condition('n.type', 'ding_news');

  if (!isset($sandbox['processed'])) {
    $sandbox['total'] = $query->countQuery()->execute()->fetchField();
    $sandbox['processed'] = 0;
  }

  // Number of ding_news nodes to process each run.
  $limit = 20;

  // Fetch the nodes for this run.
  $query->range(0, $limit);
  $nids = $query->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  foreach ($nodes as $nid => $node) {
    $node->status = 0;
    try {
      node_save($node);
    }
    catch (Exception $e) {
      // There's really nothing we can do here. The important thing is the node
      // gets marked as processed and we can continue with the batch job.
    }
    $sandbox['processed']++;
  }

  // Update bacth progress.
  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];

  if (empty($nodes)) {
    $sandbox['#finished'] = TRUE;
  }

  return t('Status: !processed / !total', [
    '!processed' => $sandbox['processed'],
    '!total' => $sandbox['total'],
  ]);
}

/**
 * Enable unpublished_nodes_redirect and save_redirect_on_delete modules.
 */
function vejlebib_settings_update_7047() {
  module_enable([
    'save_redirect_on_delete',
    'unpublished_nodes_redirect',
  ]);
}

/**
 * Enable ding_social_links module.
 */
function vejlebib_settings_update_7048() {
  module_enable(['ding_social_links']);
}

/**
 * Ensure all opening hours instances have the correct categories.
 */
function vejlebib_settings_update_7049() {
  $category_vocabulary = taxonomy_vocabulary_machine_name_load('category');

  $term = new stdClass();
  $term->vid = $category_vocabulary->vid;
  $term->name = 'Betjent åbningstid';
  taxonomy_term_save($term);

  $update_query = db_update('opening_hours')
    ->fields([
        'category_tid' => $term->tid,
        'notice' => '', // Remember to reset the old notices.
      ])
    ->condition('notice', 'Betjent åbningstid');

  $num_updated = $update_query->execute();

  return t('Update !count opening hours instances', ['!count' => $num_updated]);
}

/**
 * Updates autocomplete URL to the new Ortograf service.
 */
function vejlebib_settings_update_7050() {
  variable_set(
    'opensearch_search_autocomplete_suggestion_url',
    'https://ortograf.dbc.dk/ortograf/suggest'
  );
}

/**
 * Set "Show in mobile" flag for the latest 25 ding_news nodes.
 */
function vejlebib_settings_update_7051(&$sandbox) {
  $query = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->orderBy('n.created', 'DESC')
    ->condition('n.status', 1)
    ->condition('n.type', 'ding_news');

  // Fetch the nodes for this run.
  $query->range(0, 25);
  $nids = $query->execute()->fetchCol();

  $flag = flag_get_flag('mobile_app');
  foreach ($nids as $nid) {
    try {
      $flag->flag('flag', intval($nid), NULL, TRUE); // Skip permission check.
    }
    catch (Exception $e) {}
  }
}

/**
 * Set "Show in mobile" flag for all published ding_event nodes.
 */
function vejlebib_settings_update_7052(&$sandbox) {
  $query = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('n.status', 1)
    ->condition('n.type', 'ding_event');

  if (!isset($sandbox['processed'])) {
    $sandbox['total'] = $query->countQuery()->execute()->fetchField();
    $sandbox['processed'] = 0;
  }

  // Number of ding_news nodes to process each run.
  $limit = 20;

  // Fetch the nodes for this run.
  $query->range($sandbox['processed'], $limit);
  $nids = $query->execute()->fetchCol();

  $flag = flag_get_flag('mobile_app');
  foreach ($nids as $nid) {
    try {
      $flag->flag('flag', intval($nid), NULL, TRUE); // Skip permission check.
    }
    catch (Exception $e) {}
    $sandbox['processed']++;
  }

  // Update bacth progress.
  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];

  if (empty($nids)) {
    $sandbox['#finished'] = TRUE;
  }

  return t('Status: !processed / !total', [
    '!processed' => $sandbox['processed'],
    '!total' => $sandbox['total'],
  ]);
}

/**
 * Uninstall openlayers and taxonomy_menu modules.
 */
function vejlebib_settings_update_7053() {
  drupal_uninstall_modules(array('openlayers', 'taxonomy_menu'), TRUE);
}

/**
 * Remove all traces of ding_list_installer module.
 */
function vejlebib_settings_update_7054() {
  ding2_remove_module('ding_list_installer');
}

/**
 * Uninstall/remove openlayers, taxonomy_menu and ding_wayf modules completely
 * from the system.
 */
function vejlebib_settings_update_7055() {
  // Apparently this didn't happen last time since openlayers_views was
  // installed and is dependant on openlayers.
  drupal_uninstall_modules(array(
    'openlayers',
    'openlayers_views',
    'taxonomy_menu',
  ), TRUE);

  // This module has been completely removed from the database, but it has no
  // uninstall procedures so just remove it completely from the system.
  ding2_remove_module('ding_wayf');
}

/**
 * Revert vejlebib ding_group modifications.
 */
function vejlebib_settings_update_7056() {
  // We require some of our feature components to be reverted with some of our
  // new changes in this update, so we revert here to be safe.
  features_revert(array('ding_groups' => array('page_manager_pages', 'variable')));
  $nodes = node_load_multiple(array(), array('type' => 'ding_group'));
  foreach ($nodes as $node) {
    // First, update the default menu-links for each ding_group OG Menu.
    _og_menu_default_links_set_default_links('menu-og-' . $node->nid, 'update');

    // Then we go ahead and update aliases for each group and every sub-page in
    // that group.
    module_load_include('inc', 'pathauto');
    // We could have used pathauto_pattern_load_by_entity(), but this is safer
    // if the feature that sets up the new pattern hasn't been rebuild.
    $pattern = 'temaer/[node:title]';
    $group_alias = token_replace($pattern, array('node' => $node), array(
      'sanitize' => FALSE,
      'clear' => TRUE,
      'callback' => 'pathauto_clean_token_values',
      'language' => (object) array('language' => LANGUAGE_NONE),
      'pathauto' => TRUE,
    ));
    $group_source = 'node/' . $node->nid;
    $existing_group_alias = _pathauto_existing_alias_data($group_source, LANGUAGE_NONE);
    $path = array(
      'source' => $group_source,
      'alias' => $group_alias,
      'language' => LANGUAGE_NONE,
    );
    // By passing the existing group alias it will be removed by pathauto, which
    // provides a handy wrapper around core path_save() for that purpose.
    _pathauto_set_alias($path, $existing_group_alias);

    foreach (array('nyheder', 'arrangementer') as $slug) {
      if (!path_load(array('alias' => $group_alias . '/' . $slug))) {
        $existing_alias = _pathauto_existing_alias_data('inspiration/' . $node->nid . '/' . $slug, LANGUAGE_NONE);
        $path = array(
          'source' => 'temaer/' . $node->nid . '/' . $slug,
          'alias' => $group_alias . '/' . $slug,
          'language' => LANGUAGE_NONE,
        );

        // Set the alias or update it.
        _pathauto_set_alias($path, $existing_alias);
      }

      // Create alias for news and event terms.
      if ($slug == 'nyheder') {
        $vocabulary = taxonomy_vocabulary_machine_name_load('news_category');
      }
      else {
        $vocabulary = taxonomy_vocabulary_machine_name_load('event_category');
      }
      $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));

      foreach ($terms as $term) {
        $existing_alias = _pathauto_existing_alias_data('inspiration/' . $node->nid . '/' . $slug . '/' . $term->tid, LANGUAGE_NONE);
        $alias = $group_alias . '/' . $slug . '/' . $term->name;
        $alias = pathauto_cleanstring($alias);
        $alias = pathauto_clean_alias($alias);

        if ($alias != $existing_alias['alias']) {
          $source = 'taxonomy/term/' . $term->tid;
          pathauto_alias_uniquify($alias, $source, LANGUAGE_NONE);
          $path = array(
            'source' => 'temaer/' . $node->nid . '/' . $slug . '/' . $term->tid,
            'alias' => $alias,
            'language' => LANGUAGE_NONE,
          );

          // Set the alias or update it.
          _pathauto_set_alias($path, $existing_alias);
        }
      }
    }
  }
}

/**
 * Enable Ding IPE filter.
 */
function vejlebib_settings_update_7057() {
  module_enable(array('ding_ipe_filter'));
}

/**
 * Delete webtrends variables.
 */
function vejlebib_settings_update_7058() {
  variable_del('vejlebib_webtrends_domain');
  variable_del('vejlebib_webtrends_dcs_id');
  variable_del('vejlebib_webtrends_onsitedoms');
}

/**
 * Disable and uninstall wayf related modules.
 */
function vejlebib_settings_update_7059() {
  module_disable([
    'ding_wayf_dk_create_user',
    'ding_wayf_dk_login',
    'ding_wayf_dk',
    'wayf_dk_login',
  ], FALSE);

  drupal_uninstall_modules(array(
    'ding_wayf_dk_create_user',
    'ding_wayf_dk_login',
    'ding_wayf_dk',
    'wayf_dk_login',
  ), FALSE);
}

/**
 * Disable and uninstall save_redirect_on_delete module.
 */
function vejlebib_settings_update_7060() {
  module_disable(['save_redirect_on_delete'], FALSE);
  drupal_uninstall_modules(['save_redirect_on_delete'], FALSE);
}

/**
 * Enable ting_covers_default module.
 */
function vejlebib_settings_update_7061() {
  module_enable(['ting_covers_default']);
}

/**
 * Enable custom panel pane for ding_ipe.
 */
function vejlebib_settings_update_7062() {
  $selected = _ding_ipe_filter_selected_panes();
  if (!isset($selected['root:custom'])) {
    $selected['root:custom'] = 'root:custom';
    variable_set('ding_ipe_filter_panes_selected', $selected);
  }
}

/**
 * Enable ding_ipe on vejlebib frontpage.
 */
function vejlebib_settings_update_7063() {
  $task = page_manager_get_task('page');
  ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');
  $handlers = page_manager_load_sorted_handlers($task);

  foreach ($handlers as &$handler) {
    $save = FALSE;

    $test = $handler->name;

    if ($handler->name == 'page_vejlebib_frontpage__panel') {
      $handler->conf['pipeline'] = 'ipe';
      $save = TRUE;
    }

    // Only save the display if changes were actually made.
    if ($save) {
      page_manager_save_task_handler($handler);
    }
  }
}

/**
 * Ensure that 'user_my_library' page manager page is removed from db.
 */
function vejlebib_settings_update_7064() {
  module_load_include('inc', 'page_manager', 'plugins/tasks/page');
  $page = page_manager_page_load('user_my_library');
  if (isset($page)) {
    page_manager_page_delete($page);
  }
}
