<?php

/**
 * @file
 * Ting Subsearch
 */

use Ting\Search\TingSearchRequest;
use Ting\Search\TingSearchResultInterface;

/**
 * Implements hook_menu().
 */
function ting_subsearch_menu() {
  $items = [];

  $items['admin/config/ding/subsearch'] = [
    'title' => 'Ting subsearch',
    'description' => 'Configure ting subsearch triggers and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_subsearch_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  ];

  $items['ting_subsearch/ajax_placeholder_callback'] = [
    'title' => 'Ting subsearch AJAX placeholder callback',
    'page callback' => 'ting_subsearch_ajax_placeholder_callback',
    'access arguments' => array('access content'),
  ];

  return $items;
}

/**
 * Admin settings form for subsearch modules.
 */
function ting_subsearch_admin_settings_form($form, &$form_state) {
  $form = [];

  $form['subsearch'] = [
    '#type' => 'fieldset',
    '#title' => t('Ting Subsearch'),
    '#description' => t('Subsearch modules allow additional searches to be made based on predefined conditions.'),
  ];

  // Show info and settings for available subsearch modules.
  foreach (module_invoke_all('ting_subsearch_info') as $module => $info) {
    $form['subsearch'][$module] = [
      '#type' => 'fieldset',
      '#title' => $info['title'],
      '#description' => $info['description'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    // Subsearch modules can return general settings and settings related to
    // triggering subsearches.
    if (!empty($info['trigger_settings'])) {
      $form['subsearch'][$module]['trigger'] = [
        '#type' => 'fieldset',
        '#title' => t('Trigger condidtions'),
      ];
      $form['subsearch'][$module]['trigger'] += $info['trigger_settings'];
    }
    if (!empty($info['settings'])) {
      $form['subsearch'][$module] += $info['settings'];
    }
  }

  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function ting_subsearch_theme() {
  return [
    'ting_subsearch_message' => [
      'variables' => [
        'message' => NULL,
        'type' => NULL,
        'suggestion' => NULL,
        'suggestion_num_results' => NULL,
        'original_search' => NULL,
        'original_search_num_results' => NULL,
      ],
    ],
    'ting_subsearch_ajax_placeholder' => [
      'variables' => [
        // Module implementing hook_ting_subsearch_ajax_placeholder_callback().
        'module' => NULL,
      ],
    ],
  ];
}

/**
 * Theme preprocess function for ting_subsearch_message.
 */
function template_preprocess_ting_subsearch_message(&$variables) {
  $variables['classes_array'] = [];
  $variables['attributes_array'] = [];
  $type = $variables['type'];
  $variables['theme_hook_suggestions'][] = 'ting_subsearch_message__' . $type;
  $variables['attributes_array']['id'] = 'ting-subsearch-message-' . $type;
}

/**
 * Theme process function for ting subsearch message.
 */
function template_process_ting_subsearch_message(&$variables) {
  $variables['classes'] = implode(' ', $variables['classes_array']);
  $variables['attributes'] = drupal_attributes($variables['attributes_array']);
}

/**
 * Returns default HTML for ting subsearch message.
 */
function theme_ting_subsearch_message($variables) {
  $message = $variables['message'];
  $classes = $variables['classes'];
  $attributes = $variables['attributes'];

  $output = '<div class="ting-subsearch-message-wrapper">';
  $output .= "<div class='ting-subsearch-message $classes'$attributes>";
  $output .= $message;
  $output .= '</div></div>';

  return $output;
}

/**
 * Returns default HTML for ting subsearch ajax placeholder.
 */
function theme_ting_subsearch_ajax_placeholder($variables) {
  $module = $variables['module'];
  return "<div class='js-ting-subsearch-ajax-placeholder' data-ting-subsearch-module='$module'></div>";
}

/**
 * Returns render array for a subsearch ajax placeholder.
 *
 * This should be called on a ting_search page after search execute, since the
 * placeholders need the current ting search result object available to work.
 *
 * @param string $module
 *   The subsearch module. Must implement placeholder callback hook.
 *
 * @return array
 *   The placeholder render array.
 */
function ting_subsearch_get_ajax_placeholder_render_array($module) {
  $placeholder['#theme'] = 'ting_subsearch_ajax_placeholder';
  $placeholder['#module'] = $module;
  $placeholder['#attached']['js'][] = [
    'data' => drupal_get_path('module', 'ting_subsearch') . '/js/ting_subsearch_ajax_placeholder.js',
    'type' => 'file',
    'scope' => 'footer',
  ];

  // Pass settings used by all placeholders.
  $settings = [];

  // Ensure the current search result object is available for the placeholder
  // callbacks.
  $search_result = ting_search_current_results();
  $settings['searchResult'] = serialize($search_result);

  // Pass the machine name of the active profile to post back as profile
  // query parameter. Else pass FALSE for easy check in frontend.
  if (module_exists('ting_field_search') && $profile = ting_field_search_get_active_profile()) {
    $settings['activeProfile'] = check_plain($profile->name);
  }
  else {
    $settings['activeProfile'] = FALSE;
  }

  $placeholder['#attached']['js'][] = [
    'data' => ['tingSubsearch' => $settings],
    'type' => 'setting',
  ];

  return $placeholder;
}

/**
 * AJAX placeholder callback for async subsearches.
 */
function ting_subsearch_ajax_placeholder_callback() {
  $message = '';

  if (!empty($_POST['searchResult']) && !empty($_POST['module'])) {
    $search_result = unserialize($_POST['searchResult']);
    $module = $_POST['module'];
    $message = module_invoke($module, 'ting_subsearch_ajax_placeholder_callback', $search_result);
    $message = isset($message) ? $message : '';
  }

  drupal_json_output($message);
  drupal_exit();
}

/**
 * Performs a subsearch.
 *
 * Subsearch modules should use this function when performing a subsearch to
 * ensure it's executed the same way as the user search.
 *
 * @param \Ting\Search\TingSearchRequest $subsearch_request
 *   The subsearch request object to execute.
 *
 * @return \Ting\Search\TingSearchResultInterface
 *   The result object of the subsearch.
 */
function ting_subseach_do_subsearch(TingSearchRequest $subsearch_request) {
  if (module_exists('ting_field_search')) {
    // If a profile is active but no context is set, we set our own to ensure
    // ting_field_search will activate.
    if (ting_field_search_get_active_profile() && !ting_field_search_get_context()) {
      ting_field_search_set_context('ting_subsearch');
    }
  }

  $subsearch_result = $subsearch_request->execute();

  if (module_exists('ting_field_search')) {
    // If we used our own context remove it again.
    if (ting_field_search_get_context() == 'ting_subsearch') {
      ting_field_search_set_context(NULL);
    }
  }

  return $subsearch_result;
}

/**
 * Custom validate function for subsearch factor fields.
 */
function ting_subsearch_factor_field_validate($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || $value <= 0)) {
    form_error($element, t('%name must be a positive number', [
      '%name' => $element['#title'],
    ]));
  }
}

/**
 * Get non-fiction / ficion ratio from a search result.
 *
 * @param \Ting\Search\TingSearchResultInterface $search_result
 *   A search result object with genreCategory facet.
 *
 * @return float
 *   A float describing the ratio of non-fiction to fiction.
 */
function ting_subsearch_get_genre_ratio(TingSearchResultInterface $search_result) {
  if ($search_result->getNumTotalObjects() == 0) {
    return 0;
  }

  $facets = $search_result->getFacets();
  $terms = $facets['facet.genreCategory']->getTerms();
  $nonfiction = isset($terms['nonfiktion']) ? (int) $terms['nonfiktion']->getCount() : 0;
  $fiction = isset($terms['fiktion']) ? (int) $terms['fiktion']->getCount() : 0;

  // Avoid division by zero.
  if ($fiction == 0) {
    // Since non-fiction must be non-zero in this case, we return INF which can
    // be used in comparisons.
    return INF;
  }

  return $nonfiction / $fiction;
}

/**
 * Helper function to normalize user entered search keys before comparison.
 *
 * @param string $keys
 *   The search keys to normalize.
 *
 * @return string
 *   The normalized search keys.
 */
function ting_subsearch_normalize_keys($keys) {
  $keys = trim($keys);
  // Support users quoting their search keys.
  $keys = trim($keys, '"');
  // Replace multiple spaces with single space.
  $keys = preg_replace('/\s+/', ' ', $keys);
  $keys = drupal_strtolower($keys);
  return $keys;
}

/**
 * Get search related query parameters from the current request.
 *
 * @return array
 *   An array containing the query parameters.
 */
function ting_subsearch_get_query_parameters() {
  $query = [];

  if (module_exists('ting_field_search') && $profile = ting_field_search_get_active_profile()) {
    $query['profile'] = $profile->name;
  }
  if (!empty($_GET['sort'])) {
    $query['sort'] = $_GET['sort'];
  }
  if (!empty($_GET['facets'])) {
    $query['facets'] = $_GET['facets'];
  }

  return $query;
}
