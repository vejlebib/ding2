<?php

/**
 * @file
 * Ting Subsearch
 */

use Ting\Search\TingSearchResultInterface;

/**
 * Implements hook_menu().
 */
function ting_subsearch_menu() {
  $items = [];

  $items['admin/config/ding/subsearch'] = [
    'title' => 'Ting subsearch',
    'description' => 'Configure ting subsearch triggers and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_subsearch_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  ];

  $items['ting_subsearch/ajax'] = [
    'title' => 'Ting subsearch callback',
    'description' => 'AJAX callback to perform asynchronous subsearches.',
    'page callback' => 'ting_subsearch_ajax_callback',
    'access arguments' => array('access content'),
  ];

  return $items;
}

/**
 * Admin settings form for subsearch modules.
 */
function ting_subsearch_admin_settings_form($form, &$form_state) {
  $form = [];

  $form['subsearch'] = [
    '#type' => 'fieldset',
    '#title' => t('Ting Subsearch'),
    '#description' => t('Subsearch modules allow additional searches to be made based on predefined conditions.'),
  ];

  // Show info and settings for available subsearch modules.
  foreach (module_invoke_all('ting_subsearch_info') as $module => $info) {
    $form['subsearch'][$module] = [
      '#type' => 'fieldset',
      '#title' => $info['title'],
      '#description' => $info['description'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    // Subsearch modules can return general settings and settings related to
    // triggering subsearches.
    if (!empty($info['trigger_settings'])) {
      $form['subsearch'][$module]['trigger'] = [
        '#type' => 'fieldset',
        '#title' => t('Trigger condidtions'),
      ];
      $form['subsearch'][$module]['trigger'] += $info['trigger_settings'];
    }
    if (!empty($info['settings'])) {
      $form['subsearch'][$module] += $info['settings'];
    }
  }

  return system_settings_form($form);
}

/**
 * Implements hook_opensearch_pre_execute().
 */
function ting_subsearch_opensearch_pre_execute($request) {
  if (get_class($request) != 'TingClientSearchRequest') {
    return;
  }

  // These modules needs the facet genreCategory returned from the well, so
  // ensure it is set if one or both of them are enabled.
  if (module_exists('ting_subsearch_translate') || module_exists('ting_subsearch_secondary')) {
    $facets = $request->getFacets();
    if (!in_array('facet.genreCategory', $facets)) {
      $facets[] = 'facet.genreCategory';
      $request->setFacets($facets);
    }
  }
}

/**
 * Implements hook_theme().
 */
function ting_subsearch_theme() {
  return [
    'ting_subsearch_message' => [
      'variables' => [
        'message' => NULL,
        'type' => NULL,
        'suggestion' => NULL,
        'suggestion_num_results' => NULL,
        'original_search' => NULL,
        'original_search_num_results' => NULL,
      ],
    ],
    'ting_subsearch_ajax_trigger' => [
      'variables' => [
        // Module implementing hook_ting_subsearch_ajax_callback().
        'module' => NULL,
        'original_search' => NULL,
        'original_search_num_results' => NULL,
      ],
    ],
  ];
}

/**
 * Theme preprocess function for ting_subsearch_message.
 */
function template_preprocess_ting_subsearch_message(&$variables) {
  $variables['classes_array'] = [];
  $variables['attributes_array'] = [];
  $type = $variables['type'];
  $variables['theme_hook_suggestions'][] = 'ting_subsearch_message__' . $type;
  $variables['attributes_array']['id'] = 'ting-subsearch-message-' . $type;
}

/**
 * Theme process function for ting subsearch message.
 */
function template_process_ting_subsearch_message(&$variables) {
  $variables['classes'] = implode(' ', $variables['classes_array']);
  $variables['attributes'] = drupal_attributes($variables['attributes_array']);
}

/**
 * Returns default HTML for ting subsearch message.
 */
function theme_ting_subsearch_message($variables) {
  $message = $variables['message'];
  $classes = $variables['classes'];
  $attributes = $variables['attributes'];

  $output = '<div class="ting-subsearch-message-wrapper">';
  $output .= "<div class='ting-subsearch-message $classes'$attributes>";
  $output .= $message;
  $output .= '</div></div>';

  return $output;
}

/**
 * Returns default HTML for ting subsearch ajax trigger.
 */
function theme_ting_subsearch_ajax_trigger($variables) {
  // Ensure ting subsearch ajax trigger script is added.
  drupal_add_js(drupal_get_path('module', 'ting_subsearch') . '/js/ting_subsearch_ajax_trigger.js', [
    'type' => 'file',
    'scope' => 'footer',
  ]);

  // Build the query for the ajax callback and send it to frontend with a data
  // attribute.
  $query = [
    'original_search' => $variables['original_search'],
    'original_search_num_results' => $variables['original_search_num_results'],
    'module' => $variables['module'],
  ] + ting_subsearch_get_query_parameters();
  $query = drupal_http_build_query($query);
  $query = '?' . check_plain($query);

  return "<div class='js-ting-subsearch-ajax-trigger' data-ting-subsearch-query='$query'></div>";
}

/**
 * AJAX-callback to perform asynchronous subsearches.
 */
function ting_subsearch_ajax_callback() {
  $output = '';

  if (!empty($_GET['module']) && !empty($_GET['original_search']) && !empty($_GET['original_search_num_results'])) {
    $module = $_GET['module'];
    $original_search = $_GET['original_search'];
    $original_search_num_results = $_GET['original_search_num_results'];

    $message = module_invoke($module, 'ting_subsearch_ajax_callback', $original_search, $original_search_num_results);
    if (isset($message)) {
      $output = $message;
    }
  }

  drupal_json_output($output);
  drupal_exit();
}

/**
 * Do a separate secondary search request.
 *
 * @param string $keys
 *   The search phrase for the secondary search.
 *
 * @return \Ting\Search\TingSearchResultInterface
 *   The search result of the secondary search.
 */
function ting_subsearch_do_secondary_search($keys) {
  // Abuse ting_search but remember current search result and set again after
  // we're done to avoid side effects.
  $current_search_result = ting_search_current_results();

  if (module_exists('ting_field_search')) {
    // If a profile is active but no context is set, we set our own to ensure
    // ting_field_search will activate.
    if (ting_field_search_get_active_profile() && !ting_field_search_get_context()) {
      ting_field_search_set_context('ting_subsearch');
    }
  }

  // Let ting_search pick up any search query parameters in the request.
  $conditions = ting_search_conditions_callback($keys);

  // Execute the secondary search by calling ting_search_execute directly. This
  // has some performance overhead, since it renders some collection we don't
  // need. But on the other hand we ensure that the request will be exactly the
  // same as in a normal ting_search, and therefore the secondary search will
  // be cached if the user follows the suggestion.
  drupal_static_reset('ting_search_search_execute');
  ting_search_search_execute($keys, $conditions);
  $secondary_search_result = ting_search_current_results();

  if (module_exists('ting_field_search')) {
    // If we used our own context remove it again.
    if (ting_field_search_get_context() == 'ting_subsearch') {
      ting_field_search_set_context(NULL);
    }
  }

  if (isset($current_search_result)) {
    ting_search_current_results($current_search_result);
  }

  return $secondary_search_result;
}

/**
 * Custom validate function for subsearch factor fields.
 */
function ting_subsearch_factor_field_validate($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || $value <= 0)) {
    form_error($element, t('%name must be a positive number', [
      '%name' => $element['#title'],
    ]));
  }
}

/**
 * Get non-fiction / ficion ratio from a search result.
 *
 * @param \Ting\Search\TingSearchResultInterface $results
 *   A search result object with genreCategory facet.
 *
 * @return float
 *   A float describing the ratio of non-fiction to fiction.
 */
function ting_subsearch_get_genre_ratio(TingSearchResultInterface $results) {
  $facets = $results->getFacets();
  if (empty($facets)) {
    return FALSE;
  }

  if ($results->getNumTotalObjects() == 0) {
    return 0;
  }

  $terms = $facets['facet.genreCategory']->getTerms();
  $nonfiction = isset($terms['nonfiktion']) ? (int) $terms['nonfiktion']->getCount() : 0;
  $fiction = isset($terms['fiktion']) ? (int) $terms['fiktion']->getCount() : 0;

  // Avoid division by zero.
  if ($fiction == 0) {
    // Since non-fiction must be non-zero in this case, we return INF which can
    // be used in comparisons.
    return INF;
  }

  return $nonfiction / $fiction;
}

/**
 * Helper function to normalize user entered search keys before comparison.
 *
 * @param string $keys
 *   The search keys to normalize.
 *
 * @return string
 *   The normalized search keys.
 */
function ting_subsearch_normalize_keys($keys) {
  $keys = trim($keys);
  // Support users quoting their search keys.
  $keys = trim($keys, '"');
  // Replace multiple spaces with single space.
  $keys = preg_replace('/\s+/', ' ', $keys);
  $keys = drupal_strtolower($keys);
  return $keys;
}

/**
 * Get search related query parameters from the current request.
 *
 * @return array
 *   An array containing the query parameters.
 */
function ting_subsearch_get_query_parameters() {
  $query = [];

  if (module_exists('ting_field_search') && $profile = ting_field_search_get_active_profile()) {
    $query['profile'] = $profile->name;
  }

  return $query;
}
