<?php

/**
 * @file
 * Ting subsearch suggestions module file.
 */

module_load_include('inc', 'ting_subsearch_suggestions', 'ting_subsearch_suggestions.admin');

// The Max number of chars we support in user search and suggestions.
// TODO: Make this a setting, but the max should be 255 wich is max for PHP's
// levenshtein function.
define('TING_SUBSEARCH_SUGGESTIONS_SUGGESTION_LIMIT', 150);

/**
 * Implements hook_menu().
 */
function ting_subsearch_suggestions_menu() {
  $items['subsearch_suggestions'] = [
    'title' => 'Subsearch Suggestions',
    'description' => 'AJAXify request for subsearch suggestions',
    'page callback' => 'ting_subsearch_suggestions_ajax_callback',
    'access callback' => TRUE,
  ];
  return $items;
}

/**
 * Custom AJAX menu callback.
 */
function ting_subsearch_suggestions_ajax_callback() {
  $message = '';

  if (!empty($_POST['originalSearch']) && !empty($_POST['originalSearchNumResults'])) {
    $original_search = $_POST['originalSearch'];
    $original_search_num_results = $_POST['originalSearchNumResults'];
    $suggestion = ting_subsearch_suggestions_suggest_keys($original_search);

    if ($suggestion) {
      // Do a secondary search with the suggested keys and check if it satisfies
      // conditions.
      $suggestion_result = ting_subsearch_do_secondary_search($suggestion);
      $suggestion_num_results = $suggestion_result->getNumTotalObjects();

      $limit = variable_get('ting_subsearch_suggestions_message_limit', 10);
      $factor = variable_get('ting_subsearch_suggestions_ps_factor');

      if ($suggestion_num_results >= $limit && $suggestion_num_results / $original_search_num_results >= $factor) {
        $message = t('Search for <strong>"@suggestion"</strong> - returns <strong>!suggestion-num-results</strong> hits', [
          '@suggestion' => $suggestion,
          '!suggestion-num-results' => $suggestion_num_results,
        ]);
        $message = theme('ting_subsearch_message', [
          'message' => l($message, 'search/ting/' . $suggestion, [
            'html' => TRUE,
            'attributes' => ['target' => 'blank'],
          ]),
          'type' => 'suggestions',
          'suggestion' => $suggestion,
          'suggestion_num_results' => $suggestion_num_results,
          'original_search' => $original_search,
          'original_search_num_results' => $original_search_num_results,
        ]);
      }
    }
  }

  drupal_json_output($message);
  drupal_exit();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_subsearch_suggestions_form_ting_subsearch_admin_settings_form_alter(&$form, &$form_state) {
  $form['subsearch']['suggestions'] = [
    '#type' => 'fieldset',
    '#title' => t('Suggestions settings'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['subsearch']['suggestions']['trigger'] = [
    '#type' => 'fieldset',
    '#title' => t('Trigger'),
  ];
  $form['subsearch']['suggestions']['trigger']['ting_subsearch_suggestions_distance'] = [
    '#type' => 'textfield',
    '#title' => t('Levenshtein distance'),
    '#default_value' => variable_get('ting_subsearch_suggestions_distance', 3),
    '#description' => t('Enter the maximum Levenshtein Distance here, ie. the maximum number of characters to replace, insert or delete to transform the input string into a string from the suggestion data. A higher numbere allows for less similar words to be suggested.'),
    '#element_validate' => ['element_validate_integer_positive'],
  ];
  $form['subsearch']['suggestions']['trigger']['ting_subsearch_suggestions_trigger_limit'] = [
    '#type' => 'textfield',
    '#title' => t('Max number of hits to trigger suggestions subsearch'),
    '#default_value' => variable_get('ting_subsearch_suggestions_trigger_limit', 5),
    '#description' => t('In order to trigger a subsearch which will provide a suggestion to the user, the user-provided search string must trigger at most this number of hits. NOTE: User-provided searches that trigger 0 hits always trigger a subsearch.'),
    '#element_validate' => ['element_validate_integer_positive'],
  ];
  $form['subsearch']['suggestions']['trigger']['ting_subsearch_suggestions_ps_factor'] = [
    '#type' => 'textfield',
    '#title' => t('Ratio between primary and secondary searches for suggestions'),
    '#default_value' => variable_get('ting_subsearch_suggestions_ps_factor', 10),
    '#description' => t('Factor between amount of results from primary and secondary search for displaying suggestions.'),
    '#element_validate' => ['ting_subsearch_factor_field_validate'],
  ];
  $form['subsearch']['suggestions']['trigger']['ting_subsearch_suggestions_message_limit'] = [
    '#type' => 'textfield',
    '#title' => t('Min number of suggestion search result hits to trigger a suggestion'),
    '#default_value' => variable_get('ting_subsearch_suggestions_message_limit', 10),
    '#description' => t("If the suggestion provide lower search result hits than this value don't bother showing a search suggestion."),
    '#element_validate' => ['element_validate_integer_positive'],
  ];
}

/**
 * Implements hook_ting_search_results_prefix().
 */
function ting_subsearch_suggestions_ting_search_results_prefix($keys, $conditions, $results) {
  $original_search_num_results = $results->getNumTotalObjects();

  // It it's a zero hit search we immediatly look for a suggestion and do
  // secondary search and redirect if the new search returned any results.
  if ($original_search_num_results  == 0) {
    $suggestion = ting_subsearch_suggestions_suggest_keys($keys);

    if ($suggestion) {
      $suggestion_result = ting_subsearch_do_secondary_search($suggestion);

      if ($suggestion_result->getNumTotalObjects() > 0) {
        $additional_query = [
          'original-search' => $keys,
        ];
        $params['query'] = $additional_query;
        global $base_url;
        $url = $base_url . '/search/ting/' . strtolower($suggestion) . '?' . drupal_http_build_query($params['query']);

        header('Location: ' . $url, TRUE, 301);
        drupal_exit($url);
      }
    }
  }

  $output = '';

  // If we're already redirecting from a zero-hit search avoid trying to find
  // suggestions for our own suggestion. Display a zero hit suggestions message.
  if (!empty($_GET['original-search'])) {
    $output = theme('ting_subsearch_message', [
      'message' => t('Showing results for <strong>"@suggestion"</strong>. The search for <strong>"@original_search"</strong> returned 0 hits.', [
        '@suggestion' => $keys,
        '@original_search' => $_GET['original-search'],
      ]),
      'type' => 'suggestions',
      'suggestion' => $keys,
      'suggestion_num_results' => $original_search_num_results,
      'original_search' => $_GET['original-search'],
      'original_search_num_results' => 0,
    ]);
  }
  // Otherwise trigger non-zero-hit seconday search if it's below limit.
  // For performance reasons we handel this with async AJAX request, since it's
  // not as critical as a zero-hit search.
  elseif ($original_search_num_results <= variable_get("ting_subsearch_suggestions_trigger_limit", 5)) {
    drupal_add_js([
      'tingSubsearchSuggestions' => [
        'originalSearch' => $keys,
        'originalSearchNumResults' => $original_search_num_results,
      ],
    ], 'setting');

    drupal_add_js(drupal_get_path('module', 'ting_subsearch_suggestions') . '/js/subsearch_suggestions.js', [
      'type' => 'file',
      'scope' => 'footer',
    ]);

    // Output a placeholder to be replaced with the actual content returned
    // from AJAX callback.
    $output = '<div id="ting-subsearch-suggestions-placeholder"></div>';
  }

  return $output;
}

/**
 * Find the best suitable suggestion for the given original search.
 *
 * @param string $original_search
 *   The original search that you want to find suggestion for.
 *
 * @return string
 *   The suggestion or FALSE if it was not possible to find a suggestion within
 *   the configured constraints.
 *
 * @throws Exception
 */
function ting_subsearch_suggestions_suggest_keys($original_search) {
  if (!ding_provider_implements('search', 'autocomplete_suggestions')) {
    return FALSE;
  }

  // Build expected query object for provider hook.
  $query = [];
  $query['q'] = $original_search;
  $query['type'] = 'all';
  $suggestions = ding_provider_invoke('search', 'autocomplete_suggestions', $query);

  $result = array_reduce($suggestions, function($carry, $suggestion) use ($original_search) {
    $candidate = '';
    foreach (explode(' ', $suggestion) as $word) {
      $candidate .= $word;

      // Move along if the candidate has grown over char limit.
      if (drupal_strlen($candidate) > TING_SUBSEARCH_SUGGESTIONS_SUGGESTION_LIMIT) {
        return $carry;
      }

      $distance = ting_subsearch_suggestions_levenshtein($original_search, $candidate);

      // It can happen that candidate will be the same as user search. In this
      // case we should continue adding words, since we might still hit one that
      // will be within acceptable distance.
      if ($distance == 0) {
        continue;
      }

      if ($distance <= variable_get('ting_subsearch_suggestions_distance', 3)) {
        if (!isset($carry) || ($carry['distance'] > $distance)) {
          $carry['distance'] = $distance;
          $carry['q'] = $candidate;
        }
      }

      $candidate .= ' ';
    }
    return $carry;
  });

  if (isset($result)) {
    return $result['q'];
  }
  return FALSE;
}

/**
 * Wrapper around PHP's levenshtein that handles multibyte encodings correctly.
 *
 * PHP's levenshtein function processes each byte of the input string
 * individually which can give incorrect results in some cases. E.g. the
 * distance from "ol" to "Ã¸l" would be 2.
 *
 * This wrapper uses an approach where non-ascii characters are remapped to
 * the range [128-255] in order of appearance. Thus it supports up to 128
 * different multibyte code points max over the whole set of strings used in the
 * request and sharing this encoding.
 *
 * Based on: https://stackoverflow.com/a/26271822.
 */
function ting_subsearch_suggestions_levenshtein($str1, $str2) {
  $str1 = _ting_subsearch_suggestions_utf8_to_ascii($str1);
  $str2 = _ting_subsearch_suggestions_utf8_to_ascii($str2);
  return levenshtein($str1, $str2);
}

/**
 * Convert an UTF-8 encoded string to a single-byte string for levenshtein.
 */
function _ting_subsearch_suggestions_utf8_to_ascii($str) {
  $ascii_strings = &drupal_static(__FUNCTION__);
  // Since we remember string we need to ensure we get consistent mapping
  // between calls in a request.
  $map = &drupal_static(__FUNCTION__);

  if (!isset($ascii_strings[$str])) {
    // find all multibyte characters (cf. utf-8 encoding specs)
    $matches = array();
    if (!preg_match_all('/[\xC0-\xF7][\x80-\xBF]+/', $str, $matches)) {
      return $str; // plain ascii string
    }

    // update the encoding map with the characters not already met
    foreach ($matches[0] as $mbc)
      if (!isset($map[$mbc])) {
        $map[$mbc] = chr(128 + count($map));
      }

    // finally remap non-ascii characters
    $ascii_strings[$str] = strtr($str, $map);
  }

  return $ascii_strings[$str];
}
